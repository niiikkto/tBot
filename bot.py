import telebot
#from telebot import TeleBot
from telebot import types
import sqlite3

import requests
import os
from dotenv import load_dotenv


# Load environment variables
load_dotenv()

# Configuration
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# Initialize bot
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
user_data = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    conn = sqlite3.connect('db/database.db', check_same_thread=False)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–≤ SQLite INTEGER PRIMARY KEY —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ auto_increment)
    cursor.execute('''CREATE TABLE IF NOT EXISTS users 
               (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                name TEXT, 
                user_name TEXT)''')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–≤ SQLite INTEGER PRIMARY KEY —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ auto_increment)
    cursor.execute('''CREATE TABLE IF NOT EXISTS api
               (Api_key VARCHAR)''')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.commit()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    cursor.close()
    conn.close()

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è. \n–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    bot.register_next_step_handler(message, name)

def name(message):
    user_data[message.chat.id] = {'name': message.text.strip()}
    user_data[message.chat.id]['user_name'] = message.from_user.username
    name = user_data[message.chat.id]['name']
    username = user_data[message.chat.id]['user_name']

    conn = sqlite3.connect('db/database.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO users (name, user_name) VALUES (?, ?)', (name, username))
    conn.commit()
    cursor.close()
    conn.close()

    print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}, {username}")
    bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    markup.row(btn1)
    btn2 = types.KeyboardButton('–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤')
    btn3 = types.KeyboardButton('–ü–æ–∏—Å–∫ –∏–≥—Ä')
    btn4 = types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–Ω–∏–≥')
    markup.row(btn2, btn3, btn4)
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.üëæ \n–î–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ üé•—Ñ–∏–ª—å–º–æ–≤, üéÆ–∏–≥—Ä –∏ üìö–∫–Ω–∏–≥. –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º!"
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
    bot.register_next_step_handler(message, on_click)

@bot.message_handler()
def on_click(message):
    #–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤
    if message.text == '–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤':
        movies_text = "üé•–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—ã–≤–∞—Ç—å –≤–∞–º —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä!"
        bot.send_message(message.chat.id, movies_text)
        bot.register_next_step_handler(message, lambda msg: handle_query(msg, message.text))
    #–ü–æ–∏—Å–∫ –∏–≥—Ä
    elif message.text == '–ü–æ–∏—Å–∫ –∏–≥—Ä':
        games_text = "üéÆ–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—ã–≤–∞—Ç—å –≤–∞–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!"
        bot.send_message(message.chat.id, games_text)
        bot.register_next_step_handler(message, lambda msg: handle_query(msg, message.text))
    #–ü–æ–∏—Å–∫ –∫–Ω–∏–≥
    elif message.text == '–ü–æ–∏—Å–∫ –∫–Ω–∏–≥':
        books_text = "üìö–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—ã–≤–∞—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è!"
        bot.send_message(message.chat.id, books_text)
        bot.register_next_step_handler(message, lambda msg: handle_query(msg, message.text))
    #–ü–æ–º–æ—â—å
    else:
        help_text = "–Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.üëæ \n–î–ª—è –ø–æ–¥–±–æ—Ä–∫–∏ —Ñ–∏–ª—å–º–æ–≤, –∏–≥—Ä –∏ –∫–Ω–∏–≥. –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º! \n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ üé•—Ñ–∏–ª—å–º–æ–≤, üéÆ–∏–≥—Ä –∏–ª–∏ üìö–∫–Ω–∏–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."
        bot.send_message(message.chat.id, help_text)

def handle_query(message, query_type):
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        bot.send_chat_action(message.chat.id, 'typing')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if query_type == '–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤':
            prompt = f"–†–µ–∫–æ–º–µ–Ω–¥—É–π —Ñ–∏–ª—å–º –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {message.text} —Å–¥–µ–ª–∞–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤"
        elif query_type == '–ü–æ–∏—Å–∫ –∏–≥—Ä':
            prompt = f"–†–µ–∫–æ–º–µ–Ω–¥—É–π –∏–≥—Ä—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {message.text} —Å–¥–µ–ª–∞–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤"
        elif query_type == '–ü–æ–∏—Å–∫ –∫–Ω–∏–≥':
            prompt = f"–†–µ–∫–æ–º–µ–Ω–¥—É–π –∫–Ω–∏–≥—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {message.text}  —Å–¥–µ–ª–∞–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤"
        else:
            prompt = message.text
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        response = query_openrouter(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.reply_to(message, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def query_openrouter(prompt):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç
    """
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "google/gemini-2.0-flash-001",
        "messages": [
            {"role": "system", "content": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 1000
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
print(os.path.abspath('db/database.db'))
bot.polling(none_stop=True)